{"meta":{"title":"Never","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2020-03-07T09:45:33.865Z","updated":"2020-03-07T09:45:33.865Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-03-07T09:44:01.604Z","updated":"2020-03-07T09:44:01.604Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"如何给你的博客配置ssl证书","slug":"sslCertificate","date":"2020-03-27T08:38:32.000Z","updated":"2020-03-27T12:24:16.880Z","comments":true,"path":"2020/03/27/sslCertificate/","link":"","permalink":"http://yoursite.com/2020/03/27/sslCertificate/","excerpt":"在我们的博客搭建好了之后呢，通过域名访问会提示不安全，那么怎么解决这个问题呢。我们可以通过对我们的域名申请ssl证书来解决。还是以视频为主，这个文字更多的是一些用到的指令的罗列吧。","text":"在我们的博客搭建好了之后呢，通过域名访问会提示不安全，那么怎么解决这个问题呢。我们可以通过对我们的域名申请ssl证书来解决。还是以视频为主，这个文字更多的是一些用到的指令的罗列吧。 首先，新建目录etc/ssl 1mkdir etc&#x2F;ssl 编辑confg文件 1vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf 参数如下 12345678910111213141516171819202122232425262728http&#123; #http节点中可以添加多个server节点 server&#123; #监听443端口 listen 443; server_name 你的域名; ssl on; ssl_certificate &#x2F;etc&#x2F;ssl&#x2F;1.crt.pem; ssl_certificate_key &#x2F;etc&#x2F;ssl&#x2F;1.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; #这是我的主页访问地址，因为使用的是静态的html网页，所以直接使用location就可以完成了。 location &#x2F; &#123; #文件夹 root &#x2F;usr&#x2F;local&#x2F;service&#x2F;ROOT; #主页文件 index index.html; &#125; &#125; server&#123; listen 80; server_name 你的域名; rewrite ^&#x2F;(.*)$ https:&#x2F;&#x2F;你的域名:443&#x2F;$1 permanent; &#125;&#125; 重启nginx 1service nginx restart 如果报错 查询版本 1&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -V 进入解包路径 12345.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_modulemake 如果报错 1yum -y install openssl openssl-devel 12345cp &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx.bakcp objs&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx 查看监听端口 netstat -lnpt","categories":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Blog","slug":"Blog","permalink":"http://yoursite.com/tags/Blog/"},{"name":"ssl证书","slug":"ssl证书","permalink":"http://yoursite.com/tags/ssl%E8%AF%81%E4%B9%A6/"},{"name":"https","slug":"https","permalink":"http://yoursite.com/tags/https/"}]},{"title":"如何将博客部署到云服务器","slug":"AliyunDeploymentTutorial","date":"2020-03-21T08:38:32.000Z","updated":"2020-03-27T02:33:00.176Z","comments":true,"path":"2020/03/21/AliyunDeploymentTutorial/","link":"","permalink":"http://yoursite.com/2020/03/21/AliyunDeploymentTutorial/","excerpt":"经过我的一番研究，终于成功将博客部署的自己的服务器而不是依赖于github或者gite了，现在来一期域名购买到服务器配置到博客部署的教程。目前用的是阿里云。","text":"经过我的一番研究，终于成功将博客部署的自己的服务器而不是依赖于github或者gite了，现在来一期域名购买到服务器配置到博客部署的教程。目前用的是阿里云。 视频教程 1.安装nginx1.1安装gcc gcc-c++1yum install -y gcc gcc-c++ 1.2安装PCRE库123456789101112131415cd &#x2F;usr&#x2F;local&#x2F;wget http:&#x2F;&#x2F;downloads.sourceforge.net&#x2F;project&#x2F;pcre&#x2F;pcre&#x2F;8.37&#x2F;pcre-8.37.tar.gztar -xvf pcre-8.37.tar.gzcd pcre-8.37.&#x2F;configuremake &amp;&amp; make installpcre-config --version 1.3安装 openssl 、zlib 、 gcc 依赖123yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel 1.4安装nginx12345678910111213cd ..wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.17.9.tar.gztar -xvf nginx-1.17.9.tar.gzcd nginx-1.17.9.&#x2F;configuremake &amp;&amp; make install 修改配置文件root /home/www/website; 2.安装Git以及Node.js2.1安装Node.js12345curl -sL https:&#x2F;&#x2F;rpm.nodesource.com&#x2F;setup_10.x | bash -yum install -y nodejs 查看是否成功 12345node -vnpm -v 2.2安装Git及配置仓库安装git及新建git用户 123456789101112131415yum install gitadduser gitchmod 740 &#x2F;etc&#x2F;sudoersvi &#x2F;etc&#x2F;sudoers添加 git ALL&#x3D;(ALL) ALLchmod 400 &#x2F;etc&#x2F;sudoerssudo passwd git 切换git用户 1234567891011121314151617su gitcd ~mkdir .sshcd .sshssh-keygenvi authorized_keyschmod 600 ~&#x2F;.ssh&#x2F;authorized_keyschmod 700 ~&#x2F;.ssh 创建git仓库 1234567891011121314cd ~git init --bare blog.gitvi ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive输入git --work-tree&#x3D;&#x2F;home&#x2F;www&#x2F;website --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;blog.git checkout -f保存退出chmod +x ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive 新建/home/www/website文件夹 12345678910111213141516171819su root输入密码cd &#x2F;homemkdir wwwcd wwwmkdir website修改文件夹权限 这步很重要 视频中没有提及chmod 777 &#x2F;home&#x2F;www&#x2F;websitechmod 777 &#x2F;home&#x2F;www 在本地电脑输入 123ssh -v git@服务器的公网ip 修改本地配置文件repo: git@这里改为服务器公网IP:/home/git/blog.git 写入启动脚本在/etc/init.d/路径下添加脚本文件，名称为nginx，内容如下 1234567891011121314151617181920212223242526272829303132333435#!&#x2F;bin&#x2F;bash#Startup script for the nginx Web Server#chkconfig: 2345 85 15nginx&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginxconf&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.confcase $1 in start)echo -n &quot;Starting Nginx&quot;$nginx -c $confecho &quot; done.&quot;;;stop)echo -n &quot;Stopping Nginx&quot;killall -9 nginxecho &quot; done.&quot;;;test)$nginx -t -c $confecho &quot;Success.&quot;;;reload)echo -n &quot;Reloading Nginx&quot;ps auxww | grep nginx | grep master | awk &#39;&#123;print $2&#125;&#39; | xargs kill -HUPecho &quot; done.&quot;;;restart)$nginx -s reloadecho &quot;reload done.&quot;;;*)echo &quot;Usage: $0 &#123;start|restart|reload|stop|test|show&#125;&quot;;;esac 然后执行 1chmod +x nginx 控制指令启动service nginx start停止service nginx stop重启service nginx reload 后续有问题可以在视频下留言大家一起讨论问题解决部署时候一直输入密码报错Can’t open /dev/tty: No such device or address Error (Linux)解决办法 由于之前的线上服务器替换过ip地址，导致线下服务器crontab在拉取备份日志时日志里记录了如下问题 注意：查找服务器端问题一定要查看日志，不能靠猜，例如ssh的问题可以多加-vvv参数来具体排查问题 原因线上服务器进行了ip地址的修改，开始出现Host key verification failed的时候，以为删除自己的know_hosts文件即可，但是没有解决本质问题，所以察看日志很重要 解决方法 12345mknod -m 644 &#x2F;dev&#x2F;tty c 5 0chmod o+rw &#x2F;dev&#x2F;tty 公私钥认证解决了上面的问题，发现之前由于不清楚原因搞乱了.ssh目录的权限，无法公私钥认证登陆，这里记录一下权限设置： ~/.ssh目录的权限必须是0700~/.ssh/authorized_keys文件权限必须是0600 12345chmod 600 ~&#x2F;.ssh&#x2F;authorized_keyschmod 700 ~&#x2F;.ssh","categories":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Blog","slug":"Blog","permalink":"http://yoursite.com/tags/Blog/"},{"name":"阿里云","slug":"阿里云","permalink":"http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"}]},{"title":"从0开始拥有你自己的博客（windows10）","slug":"BlogTutorial","date":"2020-03-09T15:34:32.000Z","updated":"2020-03-23T02:06:23.811Z","comments":true,"path":"2020/03/09/BlogTutorial/","link":"","permalink":"http://yoursite.com/2020/03/09/BlogTutorial/","excerpt":"好了，趁热的博客搭建教程来了，这两天博客的搭建我可算是滚瓜烂熟了，本来从因为之前部署到github上在国内访问比较慢，打算直接部署到服务器上的。结果从阿里云搞了个服务器，弄了一天也没调通。重点是根本不知道哪里出了问题，虽说在服务器上没搞成功，但是博客的搭建却烂熟于心了。","text":"好了，趁热的博客搭建教程来了，这两天博客的搭建我可算是滚瓜烂熟了，本来从因为之前部署到github上在国内访问比较慢，打算直接部署到服务器上的。结果从阿里云搞了个服务器，弄了一天也没调通。重点是根本不知道哪里出了问题，虽说在服务器上没搞成功，但是博客的搭建却烂熟于心了。 视频教程 1.环境的准备1.1服务器环境由于部署到github上，这里就不做介绍服务器相关的了，另外我在说一下部署到gitee上的方法，都差不多的。所以下面注册账号按需求注册，github的服务器在国外，国内访问较慢，可能会出现打不开的情况。gitee在国内，访问比较快。但是每次修改网站重新部署之后都要登录gitee手动同步gitee pages，网站才会修改。 1.1.1github账号的配置1.访问github官网。2.点击右上角注册。 注意这里的用户名最好考虑清楚在填写，以后不可更改且是域名的一部分。 3.输入用户名和密码。注册完成记住账号密码就好了。 4注册成功之后登录到github首页上，点击右上角加号选择新建一个仓库。这里如果你的登录界面不在这里，自行寻找新建仓库。（New repository）。如图操作 创建完成之后是这个界面 点击右上方setting 向下滑动找到github pages 有如下提示则为成功。 github的配置到这里就结束了。 1.1.2gitee账号的配置1.访问gitee(码云)。2.点击右上角注册。 同样，这里的这里的空间域名地址最好考虑清楚在填写，以后不可更改且是域名的一部分。 3.手机或者邮箱注册都可以注册完成记住账号密码就好了。 4.这里与github类似，也是进去先建立一个仓库。 然后直接拉到最下边创建即可 创建成功之后同样复制这个地址待用。我也忘了上传文件之后会不会不显示了。先粘贴下来吧。 gitee的配置也到此结束。 1.2本地环境博客主体基于hexo框架，本地需要安装git环境、以及nodejs。 1.2.1git环境的安装这个很简单，下载一个安装包一路下一步就好了。在这里我放了一个教程，可以参照安装。这个教程还提及了配置ssh密钥的方法（里面的二.环境的配置），这里大家嫌麻烦可以不进行配置，只是后边同步的时候需要输入github的用户名和密码。如果使用的是gitee（码云）的话把公钥添加到这 添加方法实际上就是用记事本打开id_rsa.pub，把里面的内容复制粘贴到github或者gitee上就好了。 1.2.2nodejs的安装1.打开nodejs官网nodejs官网。下载安装一路下一步即可。2检查是否安装win+R输入cmd，打开命令行输入node -v 返回版本号即安装成功输入npm -v 返回版本号即安装成功 2.hexo的安装及博客的部署2.1hexo的安装按win+r弹出的框输入cmd回车弹出命令提示符。输入以下指令回车。 12npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.orgcnpm install hexo-cli -g 命令提示符默认打开位置在c盘然后我们在自己的其他盘建立个文件夹名字自己取然后输入以下指令（我假设我在d盘建立文件夹名字为123） 12d:cd 123 注意这里 cd命令的作用就是进入某个文件夹。而从c盘到d盘需要不可以直接cd命令需要先输入你的相应盘符加冒号回车。然后使用hexo命令 1hexo init 等待完成。完成提示 1INFO Start blogging with Hexo! 好到了这里呢博客就算是基本搭建完成。我们的博客相关文件都存放在233这个文件夹中。这里介绍一下。 2.2hexo的部署继续用cmd命令提示符，且需要保证在你自己建立的文件夹路径下，我在233文件夹。输入 1hexo s 提示 12INFO Start processingINFO Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop. 在浏览器打开提示的 1http:&#x2F;&#x2F;localhost:4000 就可以访问博客了，这个是他默认带的一篇博客，之后需要自己再去编写。 那么如何把这个默认的墨客部署到github上让别人访问呢。首先我们打开233文件夹中的_config.yml这个文件。这里呢打开这个文件用记事本也可以，我在这里推荐Visual Studio Code这个轻量的软件，编写博客也可以用它。 打开_config.yml这个文件找到最下面 1234# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy: type: &#39;&#39; 修改如下 1234deploy: type: git repo: 前面让大家保存好的的链接用的github就复制github的用的gitee的就复制gitee的 branch: master 然后用命令提示符，还是在233路径下。输入以下指令安装插件。 1npm install hexo-deployer-git --save 安装完成之后用下面两个指令进行部署。（第一个是生成本地静态文件，第二个是发送到github。） 12hexo ghexo d 部署过程中可能会提示让你登录github ，直接输入注册的账号和密码就好了。如果通过github的部署的话，直接通过域名【你的用户名.github.io】访问即可。 如果是通过gitee（码云）还需要登录码云。找到自己的仓库，在服务下的gitee pages选项。 点击启动 且每次部署都需要来这里更新一下。 3.博客主题的安装及修改打开hexo官网 这一部分我放在视频里讲解吧。插图太麻烦了。教程到此结束","categories":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Blog","slug":"Blog","permalink":"http://yoursite.com/tags/Blog/"}]},{"title":"我的博客可算是搭建成功了","slug":"心得","date":"2020-03-07T08:38:32.000Z","updated":"2020-03-09T15:14:07.758Z","comments":true,"path":"2020/03/07/心得/","link":"","permalink":"http://yoursite.com/2020/03/07/%E5%BF%83%E5%BE%97/","excerpt":"博客的初构建从最初的想法，到后来的实践，到后来的搭建完成。历时两天，共28个小时。艰辛坎坷啊，好在这是之前搭建服务器有着一点linux基本常识啊。确实不是专业学前端的，搞起来还头疼。我这个人学东西还喜欢从原理学起，Double的精力啊。看到标题搭建二字就知道事情不简单啊。 博客的部署及内容的排版布局其实我个认为搭建博客本身还不是最难的，最难的应该还是界面ui的布局了。hexo博客刚搭起来的时候可以说是相当简洁，甚至可以说是凄惨了。默认的排版布局自然是不可能直接拿过来应","text":"博客的初构建从最初的想法，到后来的实践，到后来的搭建完成。历时两天，共28个小时。艰辛坎坷啊，好在这是之前搭建服务器有着一点linux基本常识啊。确实不是专业学前端的，搞起来还头疼。我这个人学东西还喜欢从原理学起，Double的精力啊。看到标题搭建二字就知道事情不简单啊。 博客的部署及内容的排版布局其实我个认为搭建博客本身还不是最难的，最难的应该还是界面ui的布局了。hexo博客刚搭起来的时候可以说是相当简洁，甚至可以说是凄惨了。默认的排版布局自然是不可能直接拿过来应用，这时候还需要去hexo的模板库挑选合适的模板，定下模板之后就避免不了对其内容的修改，其实搭建博客和搭建网站的操作已经很相似了。所以在修改元素时候难免要用到亿点点前端知识，从html到css到js基本上都是成套出现的，甚至一些评论模块，字数统计等等相关模块的配置，都是一个繁琐的过程。好在可以在github上与相关的开发者进行交流。 搭建成功之后你以为搭建成功之后就可以为所欲为了吗，Naive！ 博客的书写当然不是直接用word打字就完事了，现在博客的文本编辑模式基本上还是基于markdown的，其实就书写本身来说markdown确实是一个挺好用的语言，不用体会去排版的烦恼的，可以纯粹的集中精力去对内容进行编排，但是上手起来确实是需要一个适应的时间的。有一说一嗷，当你真正去使用markdown去编辑内容的话，你一定会爱上他的。 总结这两天完全投入到博客的搭建上去了，自己的很多计划安排被打乱，估计又是几个不眠夜啊。当日事，当日毕，还是要紧遵的。 目前的最首要任务还是手头opencv的一个图像识别的算法，以及之前落下的功课需要追回，同时计算机等级考试和四六级还不能放下，我当时为什么犯二计算机报了三科呢，得回这波疫情托一手。最近又在组织学校的电赛。还有很多的相关事宜，分身乏术啊。 之后我可能会趁热抓紧出一个搭建博客的教程，真·带你从零基础搭建博客。哈哈哈哈哈哈哈哈哈绝对真，我就是零基础。 之前还答应要出一个搭建服务器的教程，哎呦，我想想都头疼。看吧 争取这个月之内完事hhhhhhhhh。 可以看到页面的排版布局还是比较生疏，确实还需要适应的过程吧。感觉要不是学校的论文需要用word格式，完全可以用markdown来写。 这玩意怎么能多敲几行回车呢。。。。。。。。。。。。。","categories":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"博客搭建成功的感想","slug":"博客搭建成功的感想","permalink":"http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F%E7%9A%84%E6%84%9F%E6%83%B3/"}]}]}